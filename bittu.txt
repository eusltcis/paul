class Book {
    int bookID; 
    String title ;
    String author;
    boolean available ; 


    Book (int bookID, String title, String author) {
        this.bookID = bookID;
        this.title = title;
        this.author = author;
        this.available = true;

    }


    void borrowBook () {
        if (available) {
            available = false;
        } else {
            System.out.println("Book is not available");
        }
    }


    void returnBook () {
        if (available) {
            available = true;
        } else {
            System.out.println("Book is already returned");
        }
    }


    void displayinfo () {
        System.out.println("Book ID: " + bookID);
        System.out.println("Title: " + title);
        System.out.println("Author: " + author);
        System.out.println("Available: " + available);
    }
}



// member class 

class Memeber {
    int memberID;
    String name;
    Book borrowBook ;


    Memeber (int memberID, String name) {
        this.memberID = memberID;
        this.name = name;
        this.borrowBook = null;
    }

    void borrowBook(Book b) {
        if (b.available) {
            b.borrowBook();
        } else {
            System.out.println("Book is not available");
        }
    }

    void retrunBook () {
        if (borrowBook != null) {
            borrowBook.returnBook();
            borrowBook = null;
        } else {
            System.out.println("No book to return");
        }
    }


    void displayinfo () {
        System.out.println("Member ID: " + memberID);
        System.out.println("Name: " + name);
        if (borrowBook != null) {
            System.out.println("Borrowed Book: " +borrowBook.title);
        } else {
            System.out.println("No book borrowed");
        }
    }
}
    


// Library class

class Library {
    public static void main(String[] args) {

        Book [] books = {
            new Book(1, "Java", "James"),
            new Book(2, "Python", "Guido"),
            new Book(3, "C++", "Bjarne")
        };

        Memeber [] members = {
            new Memeber(1, "John"),
            new Memeber(2, "Doe"),
            new Memeber(3, "mike")
        };
        
       

        members[0].borrowBook(books[0]);
        members[1].borrowBook(books[1]);
        members[2].borrowBook(books[2]);


        members[0].retrunBook();
        members[1].retrunBook();

       System.out.println("Books info");
        for (int i = 0; i < 3; i++) {
            books[i].displayinfo();
            System.out.println();
        }

        
        System.out.println("Members info");
        for (int i = 0; i < 3; i++) {
            members[i].displayinfo();
            System.out.println();
        }   
        

    }
}












import java.util.Scanner;
class seatss{
	public static void main (String[]Args)
	{
		String seats[][] = new String [5][8];
		
		int seatNum= 1;
		for (int i=0;i<5;i++)
		{
			for (int j=0;j<8;j++)
			{
				System.out.print(seatNum+ " ");
				seats[i][j] = seatNum+ " ";
				seatNum++;
			}
			System.out.println(" ");
		}
		
		Scanner input = new Scanner(System.in);
		System.out.print("Enter the seat number :- ");
		int userinput=input.nextInt();
		
		String userseatnumber = userinput+ " ";
		
		if(userinput >0 && userinput <=40)
		{
			for (int i=0;i<5;i++)
		{
			for (int j=0;j<8;j++)
			
			if(userseatnumber.equals(seats[i][j]))
			{
				seats[i][j]= "X";
			}
			
		}
		
		
		}
		else
			{
				System.out.println("Seat is resavered");
			}
	
	for(i=0;i<5;i++){
		for(j=0;j<8;j++)
		{
			System.out.print(seats[i][j]);
		}
	}
	System.out.println(" ");
		
	}
}









abstract class Animal {
    protected int legs;

    protected Animal(int legs) {
        this.legs = legs;
    }

    abstract void eat();

    void walk() {
        System.out.println("Walks with " + legs + " legs");
    }

}

class Spider extends Animal {

    Spider() {
        super(8);
    }

    @Override
    void eat() {
        System.out.println("Spider is eating");
    }

}

interface Pet {

    String getName();

    void setName(String name);

    void play();

}

class Cat extends Animal implements Pet {
    String name;

    Cat(String name) {
        super(4);

        setName(name);

    }

    Cat() {
        this("Kitty");

    }

    @Override
    public void setName(String name) {
        this.name = name ; 
    }

    @Override 
    public String getName() {
        return name ;
    }

    @Override

    public void play () {
        System.out.println("Cat is Playing");
    }


    void eat() {
        System.out.println("Cat is Eating");
    }

}


class Fish extends Animal {
    
    Fish() {
        super(0) ;

    }

    @Override

    void walk () {
        System.out.println("fish cant walk");
    }

    @Override

    void eat() {

    }
}





public class answer {

    public static void main(String[] args) {

        Fish d = new Fish();
        Cat c = new Cat("Fluffy");
        Animal e = new Spider();
        Animal a = new Fish();
        Pet p = new Cat();

        c.getName();
        d.walk();
        a.walk();
        e.eat();
        p.play();




        // poly 

        Animal newAnimal = new Cat("Tommy");
        newAnimal.eat();




    }
}
