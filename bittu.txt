import java.util.*;

public class SchedulingCalculator {
    public static void main(String[] args) {
        int[] pid = {1, 2, 3, 4};
        int[] bt = {21, 3, 6, 2};

        System.out.println("FCFS Scheduling:");
        schedule(pid, bt, false);

        System.out.println("\nSJF Scheduling:");
        schedule(pid, bt, true);

        System.out.println("\nRound-Robin Scheduling (Quantum = 4ms):");
        roundRobin(pid, bt, 4);
    }

    static void schedule(int[] pid, int[] bt, boolean sjf) {
        int n = pid.length, ct = 0, totalTAT = 0, totalWT = 0;
        int[][] p = new int[n][2];

        for (int i = 0; i < n; i++) {
            p[i][0] = pid[i];
            p[i][1] = bt[i];
        }

        if (sjf) Arrays.sort(p, Comparator.comparingInt(a -> a[1]));

        System.out.println("PID | BT | CT | TAT | WT");
        for (int i = 0; i < n; i++) {
            ct += p[i][1];
            int tat = ct, wt = tat - p[i][1];
            totalTAT += tat;
            totalWT += wt;
            System.out.printf("%3d | %2d | %2d | %3d | %2d\n", p[i][0], p[i][1], ct, tat, wt);
        }
        System.out.printf("\nAvg TAT: %.2f, Avg WT: %.2f\n", (double) totalTAT / n, (double) totalWT / n);
    }

    static void roundRobin(int[] pid, int[] bt, int quantum) {
        int n = pid.length;
        int[] remainingBT = Arrays.copyOf(bt, n);
        int[] ct = new int[n], tat = new int[n], wt = new int[n];
        int totalTAT = 0, totalWT = 0, time = 0;
        Queue<Integer> queue = new LinkedList<>();

        for (int i = 0; i < n; i++) queue.add(i);

        while (!queue.isEmpty()) {
            int i = queue.poll();
            if (remainingBT[i] > quantum) {
                time += quantum;
                remainingBT[i] -= quantum;
                queue.add(i);
            } else {
                time += remainingBT[i];
                remainingBT[i] = 0;
                ct[i] = time;
                tat[i] = ct[i];
                wt[i] = tat[i] - bt[i];
                totalTAT += tat[i];
                totalWT += wt[i];
            }
        }

        System.out.println("PID | BT | CT | TAT | WT");
        for (int i = 0; i < n; i++) {
            System.out.printf("%3d | %2d | %2d | %3d | %2d\n", pid[i], bt[i], ct[i], tat[i], wt[i]);
        }
        System.out.printf("\nAvg TAT: %.2f, Avg WT: %.2f\n", (double) totalTAT / n, (double) totalWT / n);
    }
}








import java.util.Arrays;

public class SchedulingCalculator {
    public static void main(String[] args) {
        int[] bt = {21, 3, 6, 2};

        System.out.println("FCFS Scheduling:");
        schedule(bt, false);

        System.out.println("\nSJF Scheduling:");
        schedule(bt, true);
    }

    static void schedule(int[] bt, boolean sjf) {
        if (sjf) Arrays.sort(bt);

        int ct = 0, totalTAT = 0, totalWT = 0;

        System.out.println("BT | CT | TAT | WT");
        for (int b : bt) {
            ct += b;
            int tat = ct, wt = tat - b;
            totalTAT += tat;
            totalWT += wt;
            System.out.printf("%2d | %2d | %3d | %2d\n", b, ct, tat, wt);
        }
        System.out.printf("\nAvg TAT: %.2f, Avg WT: %.2f\n", (double) totalTAT / bt.length, (double) totalWT / bt.length);
    }
}






#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
#include <algorithm>
#include <numeric>
#include <cmath>
using namespace std;

int main() {
    int arr[10];

    cout << "Enter 10 integers: "<<endl;
    for (int &n : arr) cin >> n;

    // Fork and perform tasks based on process number
    for (int i = 0; i < 8; i++) {
        pid_t pid = fork();

        if (pid == 0) {
            switch (i) {
                case 0: 
                    cout << "Array elements: ";
                    for (int n : arr) cout << n << " ";
                    cout << endl;
                    break;
                case 1: // Sum of all numbers
                    cout << "Sum of all numbers: " << accumulate(arr, arr + 10, 0) << endl;
                    break;
                case 2: // Sum of even numbers
                    cout << "Sum of even numbers: " 
                         << accumulate(arr, arr + 10, 0, [](int a, int b) { return b % 2 == 0 ? a + b : a; }) 
                         << endl;
                    break;
                case 3: // Sum of odd numbers
                    cout << "Sum of odd numbers: " 
                         << accumulate(arr, arr + 10, 0, [](int a, int b) { return b % 2 != 0 ? a + b : a; }) 
                         << endl;
                    break;
                case 4: // Sum of prime numbers
                    cout << "Sum of prime numbers: "  << endl;
                    break;
                case 5: { // Sort array in ascending order
                    sort(arr, arr + 10);
                    cout << "Array in ascending order: ";
                    for (int n : arr) cout << n << " ";
                    cout << endl;
                    break;
                }
                case 6: // Find the maximum number
                    cout << "Maximum number: " << *max_element(arr, arr + 10) << endl;
                    break;
                case 7: { // Search for a number
                    int x;
                    cout << "Enter a number to search: ";
                    cin >> x;
                    cout << (find(arr, arr + 10, x) != arr + 10 ? "Number found" : "Number not found") << endl;
                    break;
                }
            }
        }
    }

    // Parent process waits for all child processes to complete
    while (wait(NULL) > 0);
    return 0;
}






# Create the text file Question4.txt
touch Question4.txt

# Create folder structure
mkdir -p MyPractical/Repair Installation

# Rename the 'products' folder as 'MyPractical'
mv products MyPractical

# Create two text files inside 'MyPractical'
touch MyPractical/MyFirstFile.txt MyPractical/MySecondFile.txt

# Rename those files to 'FirstFile.txt' and 'SecondFile.txt'
mv MyPractical/MyFirstFile.txt MyPractical/FirstFile.txt
mv MyPractical/MySecondFile.txt MyPractical/SecondFile.txt

# Insert sentence in 'FirstFile.txt'
echo "Iâ€™m following Introduction to OS in Trincomalee Campus, Eastern University, Sri Lanka." > MyPractical/FirstFile.txt

# Insert personal details into 'SecondFile.txt'
echo -e "Registration No: [Your Registration Number]\nName: Judechihan\nDate of Birth: [Your DOB]\nAddress: Udaiyarkaddu North, Udaiyarkaddu" > MyPractical/SecondFile.txt

# Copy 'FirstFile.txt' to the 'Repair' folder
cp MyPractical/FirstFile.txt MyPractical/Repair/

# Move 'SecondFile.txt' to the 'Repair' folder
mv MyPractical/SecondFile.txt MyPractical/Repair/

# Append content of 'FirstFile.txt' to 'SecondFile.txt' inside 'Repair' folder
cat MyPractical/FirstFile.txt >> MyPractical/Repair/SecondFile.txt

# Zip/Compress the 'MyPractical' folder
zip -r MyPractical.zip MyPractical

# Delete the 'Installation' folder
rm -r Installation

# Create user 'guestUser' and set password 'open 1234'
sudo useradd guestUser
echo "guestUser:open1234" | sudo chpasswd

# Login as 'guestUser'
su guestUser


import java.util.*;
public class PreEmptivePS {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        int[] process = new int[n];
        int[] AT = new int[n];
        int[] BT = new int[n];
        int[] priority = new int[n];
        int[] CT = new int[n];
        int[] TAT = new int[n];
        int[] WT = new int[n];
        int[] remainingBT = new int[n];
        boolean[] completed = new boolean[n];

        System.out.println("Enter the arrival time, burst time, and priority for each process:");
        for (int i = 0; i < n; i++) {
            process[i] = i + 1;
            System.out.print("\tProcess " + (i + 1) + " arrival time: ");
            AT[i] = sc.nextInt();
            System.out.print("\tProcess " + (i + 1) + " burst time: ");
            BT[i] = sc.nextInt();
            System.out.print("\tProcess " + (i + 1) + " priority: ");
            priority[i] = sc.nextInt();
            remainingBT[i] = BT[i];
            System.out.println();
        }

        int currentTime = 0;
        int completedProcess = 0;

        while (completedProcess < n) {
            int highestPriority = -1;
            int maxPriority = Integer.MIN_VALUE;

            for (int i = 0; i < n; i++) {
                if (!completed[i] && AT[i] <= currentTime && priority[i] > maxPriority) {
                    highestPriority = i;
                    maxPriority = priority[i];
                }
            }

            if (highestPriority == -1) {
                currentTime++;
            } else {
                remainingBT[highestPriority]--;
                currentTime++;

                if (remainingBT[highestPriority] == 0) {
                    completed[highestPriority] = true;
                    CT[highestPriority] = currentTime;
                    TAT[highestPriority] = CT[highestPriority] - AT[highestPriority];
                    WT[highestPriority] = TAT[highestPriority] - BT[highestPriority];
                    completedProcess++;
                }
            }
        }

        double TWT = 0;
        double TTAT = 0;
        for (int i = 0; i < n; i++) {
            TWT += WT[i];
            TTAT += TAT[i];
        }

        System.out.println("Process\tAT\tBT\tPriority\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.println(process[i] + "\t" + AT[i] + "\t" + BT[i] + "\t" + priority[i] + "\t\t" + CT[i] + "\t" + TAT[i] + "\t" + WT[i]);
        }

        System.out.println("\nAverage waiting time: " + (TWT / n));
        System.out.println("Average turn around time: " + (TTAT / n));
    }
}




import java.util.*;
public class PreEmptiveSJF{
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter thr number of processes:");
		int n = sc.nextInt();
		
		int[] process = new int[n];
		int[] AT = new int[n];
		int[] BT = new int[n];
		int[] CT = new int[n];
		int[] TAT = new int[n];
		int[] WT = new int[n];
		int[] remainingBT = new int[n];
		boolean[] completed = new boolean[n];
		
		System.out.println("Enter the arrival time and burst time for each processes.");
		for(int i=0;i<n;i++){
			process[i] = i+1;
			System.out.print("Process "+(i+1)+" arrival time:");
			AT[i] = sc.nextInt();
			System.out.print("Process "+(i+1)+" burst time:");
			BT[i] = sc.nextInt;
			remainingBT[i] = BT[i]
			System.out.println();
		}
		
		int currentTime = 0;
		int completedProcess = 0;
		
		while(completedProcess < n){
			int shortest = -1;
			int MinRemainingBT = Integer.MAX_VALUE;
			
			for(int i=0;i<n;i++){
				if(!completed[i] && AT[i] <= currentTime && remainingBT[i] < MinRemainingBT){
					shortest = i;
					MinRemainingBT = remainingBT[i];
				}
			}
			
			if(shortest ==-1){
				currentTime++;
			}else{
				remainingBT[shortest]--;
				currentTime++;
				if(remainingBT[shortest] == 0){
					completed[shortest] = true;
					completedProcess++;
					CT[shortest] = currentTime;
					TAT[shortest] = CT[shortest] - AT[shortest];
					WT[shortest] = TAT[shortest] - BT[shortest];
				}
			}
		}
		
		double totalWT = 0, totalTAT = 0;
    System.out.println("Process\tAT\tBT\tCT\tWT\tTAT");
    for (int i = 0; i < n; i++) {
      totalWT += WT[i];
			totalTAT += TAT[i];
      System.out.println(process[i] + "\t" + AT[i] + "\t" + BT[i] + "\t"+ CT[i] + "\t" + WT[i] + "\t" + TAT[i]);
    }

    System.out.println("\nAverage Waiting Time: " + (totalWT / n));
    System.out.println("Average Turnaround Time: " + (totalTAT / n));
		
	}
}


import java.util.*;
public class NonPreEmptiveSJF{
	public static void main(String[] args){
		Scanner sc = nre Scanner(Systemin);
		
		System.out.print("Enter thr number of processes:");
		int n = sc.nextInt();
		
		int[] process = new int[n];
		int[] AT = new int[n];
		int[] BT = new int[n];
		int[] CT = new int[n];
		int[] TAT = new int[n];
		int[] WT = new int[n];
		boolean[] completed = new boolean[n];
		
		System.out.println("Enter the arrival time and burst time for each processes.");
		for(int i=0;i<n;i++){
			process[i] = i+1;
			System.out.print("Process "+(i+1)+" arrival time:");
			AT[i] = sc.nextInt();
			System.out.print("Process "+(i+1)+" burst time:");
			BT[i] = sc.nextInt();
			System.out.println();
		}
		
		int currentTime = 0;
		int completedProcess = 0;
		
		while(completedProcess < n){
			int shortest = -1;
			int minBT = Integer.MAX_VALUE;
			
			for(int i=0;i<n;i++){
				if(!completed[i] && AT[i] <= currentTime && BT[i] < minBT){
					shortest = i;
					minBT = BT[i];
				}
			}
			
			if(shortest == -1){
				currentTime++;
			}else{
				currentTime += BT[shortest];
				CT[shortest] = currentTime;
				TAT[shortest] = CT[shortest] - AT[shortest];
				WT[shortest] = TAT[shortest] - BT[shortest];
				completed[shortest] = true;
				completedProcess++;
			}
		}
		
		double TWT = 0;
		double TTAT = 0;
		for(int i=0;i<n;i++){
			TWT += WT[i];
			TTAT += TAT[i];
		}
		
		System.out.println("Process\tAT\tBT\tCT\tTAT\tWT");
    for (int i = 0; i < n; i++) {
      System.out.println(process[i] + "\t" + AT[i] + "\t" + BT[i] + "\t" + CT[i] + "\t" + TAT[i] + "\t" + WT[i]);
    }

    System.out.println("\nAverage waiting time: " + (TWT / n));
    System.out.println("Average turn around time: " + (TTAT / n));
		
		
	}
}



import java.util.*;
public class RoundRobin {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        System.out.print("Enter the time quantum: ");
        int timeQuantum = sc.nextInt();

        int[] AT = new int[n];
        int[] BT = new int[n];
        int[] remainingBT = new int[n];
        int[] CT = new int[n];
        int[] TAT = new int[n];
        int[] WT = new int[n];

        System.out.println("Enter the arrival time and burst time for each process:");
        for (int i = 0; i < n; i++) {
            System.out.print("\tProcess " + (i + 1) + " arrival time: ");
            AT[i] = sc.nextInt();
            System.out.print("\tProcess " + (i + 1) + " burst time: ");
            BT[i] = sc.nextInt();
            remainingBT[i] = BT[i];
						System.out.println();
        }

				int currentTime = 0;
				int completedProcess = 0;
				Queue<Integer> readyQueue = new LinkedList<>();
				
				while(completedProcess < n){
					for(int i=0;i<n;i++){
						if(AT[i] < currentTime && remainingBT[i] > 0 && !readyQueue.contains(i)){
							readyQueue.add(i);
						}
					}
					
					if(readyQueue.isEmpty()){
						currentTime++;
						continue;
					}
					
					int currentProcess = readyQueue.poll();
					if(remainingBT[currentProcess] > timeQuantum){
						currentTime += timeQuantum;
						remainingBT[currentProcess] -= timeQuantum;
						for(int i=0;i<n;i++){
							if(AT[i] < currentTime && remainingBT[i] > 0 && !readyQueue.contains(i) && i!=currentProcess){
								readyQueue.add(i);
							}
						}
						readyQueue.add(currentProcess);
					}else{
						currentTime+=remainingBT[currentProcess];
						CT[currentProcess] = currentTime;
						TAT[currentProcess] = CT[currentProcess] - AT[currentProcess];
						WT[currentProcess] = TAT[currentProcess] - BT[currentProcess];
						remainingBT[currentProcess] = 0;
						completedProcess++;
						
					}
				}
			
			
        System.out.println("Process\tAT\tBT\tCT\tTAT\tWT");
        double totalWT = 0, totalTAT = 0;
        for (int i = 0; i < n; i++) {
            totalWT += WT[i];
            totalTAT += TAT[i];
            System.out.println((i + 1) + "\t" + AT[i] + "\t" + BT[i] + "\t" + CT[i] + "\t" + TAT[i] + "\t" + WT[i]);
        }

        System.out.println("\nAverage Waiting Time: " + (totalWT / n));
        System.out.println("Average Turnaround Time: " + (totalTAT / n));
    }
}

import java.util.*;
public class NonPreEmptivePS {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        int[] process = new int[n];
        int[] AT = new int[n];
        int[] BT = new int[n];
        int[] priority = new int[n];
        int[] CT = new int[n];
        int[] TAT = new int[n];
        int[] WT = new int[n];
        boolean[] completed = new boolean[n];

        System.out.println("Enter the arrival time, burst time, and priority for each process:");
        for (int i = 0; i < n; i++) {
            process[i] = i + 1;
            System.out.print("\tProcess " + (i + 1) + " arrival time: ");
            AT[i] = sc.nextInt();
            System.out.print("\tProcess " + (i + 1) + " burst time: ");
            BT[i] = sc.nextInt();
            System.out.print("\tProcess " + (i + 1) + " priority: ");
            priority[i] = sc.nextInt();
            System.out.println();
        }

        int currentTime = 0;
				int completedProcess = 0;
				
				while(completedProcess < n){
					int highestPriority = -1;
					int maxPriority = Integer.MIN_VALUE;
					
					for(int i=0;i<n;i++){
						if(!completed[i] && AT[i] <= currentTime && priority[i] > maxPriority){
							highestPriority = i;
							maxPriority = priority[i];
						}
					}
					if(highestPriority == -1){
						currentTime++;
					}else{
						currentTime += BT[highestPriority];
						CT[highestPriority] = currentTime;
						TAT[highestPriority] = CT[highestPriority] - AT[highestPriority];
						WT[highestPriority] = TAT[highestPriority] - BT[highestPriority];
						completed[highestPriority] = true;
						completedProcess++;
					}
				}

        double TWT = 0;
        double TTAT = 0;
        for (int i = 0; i < n; i++) {
            TWT += WT[i];
            TTAT += TAT[i];
        }

        System.out.println("Process\tAT\tBT\tPriority\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.println(process[i] + "\t" + AT[i] + "\t" + BT[i] + "\t" + priority[i] + "\t\t" + CT[i] + "\t" + TAT[i] + "\t" + WT[i]);
        }

        System.out.println("\nAverage waiting time: " + (TWT / n));
        System.out.println("Average turn around time: " + (TTAT / n));
    }
}
 import java.util.*;
public class FCFS{
	public static void main(String[] args){
		Scanner sc  = new Scanner(System.in);
		
		System.out.print("Enter the number of processes:");
		int n =sc.nextInt();
		
		int[] process = new int[n];
		int[] AT = new int[n];
		int[] BT = new int[n];
		int[] CT = new int[n];
		int[] TAT = new int[n];
		int[] WT = new int[n];
		
		System.out.println("Enter the arrival time and burst time for each processes:");
		for(int i=0;i<n;i++){
			process[i] = i+1;
			System.out.print("\tProcess "+(i+1)+" arrival time:");
			AT[i] = sc.nextInt();
			System.out.print("\tProcess "+(i+1)+" burst time:");
			BT[i] = sc.nextInt();
			System.out.println();
		}
		
		int currentTime = 0;
		for(int i=0;i<n;i++){
			if(currentTime < AT[i]){
				currentTime = AT[i];
			}
			
			CT[i] = currentTime + BT[i];
			TAT[i] = CT[i] - AT[i];
			WT[i] = TAT[i] - BT[i];
			currentTime = CT[i];
		}
		
		double TWT = 0;
		double TTAT = 0;
		for(int i=0;i<n;i++){
			TWT += WT[i];
			TTAT += TAT[i];
		}
		
		System.out.println("Process\tAT\tBT\tCT\tTAT\tWT");
		for(int i=0;i<n;i++){
			System.out.println(process[i] + "\t" + AT[i] + "\t" + BT[i] + "\t" + CT[i] + "\t" + TAT[i] + "\t" + WT[i]);
		}
		
		System.out.println("Average waiting time:"+(TWT/n));
		System.out.println("Average turn around time:"+(TTAT/n));
		
	}
}
