package line;

import javax.swing.*;
import java.awt.*;

public class HouseRotation extends JPanel {

	// House components: Base, Roof, and Door
		int[][] base = {{100, 200}, {300, 200}, {300, 400}, {100, 400}, {100, 200}};
		int[][] roof = {{100, 200}, {200, 100}, {300, 200}, {100, 200}};
		int[][] door = {{170, 400}, {230, 400}, {230, 320}, {170, 320}, {170, 400}};

			public void paint(Graphics g) {


				// Draw original house (Blue)
				g.setColor(Color.BLUE);
				drawShape(g,base);
				drawShape(g,roof);
				drawShape(g,door);

				// translate the house by (-100,-400)
				translate(base, -100, -400);
				translate(roof, -100, -400);
				translate(door, -100, -400);

				// rotate the house by 15
					rotate(base, 90);
					rotate(roof, 90);
					rotate(door, 90);

					// translate the house by (100,400)
					translate(base, 300, 400);
					translate(roof, 300, 400);
					translate(door, 300, 400);
					// Draw house after rotation about pivot point (Red)
					g.setColor(Color.RED);
					drawShape(g,base);
					drawShape(g,roof);
					drawShape(g,door);

					// scale the house by 1.5 in both x and y
					scale(base, 1.5, 1.5);
					scale(roof, 1.5, 1.5);
					scale(door, 1.5, 1.5);
					
					g.setColor(Color.RED);
					drawShape(g,base);
					drawShape(g,roof);
					drawShape(g,door);



			}

			// Draw a shape using DDA line algorithm
			public void drawShape(Graphics g,int[][] shape) {
				for (int i = 0; i < shape.length-1 ; i++) {
					ddaLine(g,shape[i][0], shape[i][1], shape[i + 1][0], shape[i + 1][1]);
				}
			}

			// DDA Line Algorithm


			// Translation function
			public void translate(int[][] shape, int tx, int ty) {
				for (int i = 0; i < shape.length; i++) {
					shape[i][0] += tx;
					shape[i][1] += ty;
				}
			}
			// Rotate function

			public void rotate(int[][] shape, double angleDegrees) {
				double angle = Math.toRadians(angleDegrees); // Convert to radians
				for (int i = 0; i < shape.length; i++) {
					int x = shape[i][0];
					int y = shape[i][1];
					shape[i][0] = (int) Math.round(x * Math.cos(angle) - y * Math.sin(angle));
					shape[i][1] = (int) Math.round(x * Math.sin(angle) + y * Math.cos(angle));
				}
			}
			
			// Scaling function
			public void scale(int[][] shape, double sx, double sy) {
			    for (int i = 0; i < shape.length; i++) {
			        shape[i][0] = (int) Math.round(shape[i][0] * sx);
			        shape[i][1] = (int) Math.round(shape[i][1] * sy);
			    }
			}









			public void ddaLine(Graphics g,int x1, int y1, int x2, int y2) {
				int dx = x2 - x1, dy = y2 - y1, steps = Math.max(Math.abs(dx), Math.abs(dy));
				float Xinc = (float) dx / steps, Yinc = (float) dy / steps;
				float x = x1, y = y1;
				for (int i = 0; i <= steps; i++) {
					g.fillRect(Math.round(x), Math.round(y), 2, 2);
					x += Xinc;
					y += Yinc;
				}
			}





			// Main method to run the program
			public static void main(String[] args) {
				JFrame frame = new JFrame("House Rotation Example");
				frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame.setSize(900, 900);
				frame.add(new HouseRotation());
				frame.setVisible(true);
			}
	}








///bresenham circle 

package line;
import java.awt.*;
import javax.swing.*;

public class bcircle extends JPanel{
	
	
	
	
	
	public void paint(Graphics g) {
		draw(g,200,200,100);
	}
	
	public void draw(Graphics g,int xc, int yc, int r) {
		int x=0;
		int y=r;
		int p =3-2 *r;

		while(y>=x) {
			x++;
			if(p<0) {
				p += 4*x+6;
			}
			else {
				y--;
				p += 4*(x-y)+10;
			}
			plot(g,xc,yc,x,y);
		}
	}
	public void plot(Graphics g, int xc,int yc, int x, int y) {
		g.fillRect(xc+x, yc+y, 2, 2);
		g.fillRect(xc-x, yc+y, 2, 2);
		g.fillRect(xc+x, yc-y, 2, 2);
		g.fillRect(xc-x, yc-y, 2, 2);
		g.fillRect(xc+y, yc+x, 2, 2);
		g.fillRect(xc-y, yc+x, 2, 2);
		g.fillRect(xc+y, yc-x, 2, 2);
		g.fillRect(xc-y, yc-x, 2, 2);
	}
	
	
	
	public static void main(String []args) {
		JFrame frame = new JFrame("brcircle");
		bcircle panel = new bcircle();
		frame.add(panel);
		frame.setSize(400,400);
		frame.setVisible(true);
	}

}


//bresenham line 

package line;

import java.awt.*;
import javax.swing.*;

public class BresenhamLineDrawing extends JPanel {

    public void paint(Graphics g) {
        g.setColor(Color.RED);
        draw(g, 50, 150, 150, 50);   // Roof left
        g.setColor(Color.BLACK);
        draw(g, 150, 50, 250, 150);  // Roof right
        g.setColor(Color.GREEN);
        draw(g, 50, 150, 250, 150);  // Top wall
        g.setColor(Color.BLACK);
        draw(g, 50, 150, 50, 300);   // Left wall
        draw(g, 250, 150, 250, 300); // Right wall
        draw(g, 50, 300, 250, 300);  // Bottom
        draw(g, 125, 250, 125, 300); // Door left
        draw(g, 175, 250, 175, 300); // Door right
        draw(g, 125, 250, 175, 250); // Door top
    }

    public void draw(Graphics g, int x1, int y1, int x2, int y2) {
        int dx = Math.abs(x2 - x1);
        int dy = Math.abs(y2 - y1);
        int sx = x1 < x2 ? 1 : -1;
        int sy = y1 < y2 ? 1 : -1;

        int x = x1;
        int y = y1;

        // Case 1: gentle slope (dx > dy)
        if (dx > dy) {
            int p = 2 * dy - dx;
            for (int i = 0; i <= dx; i++) {
                g.fillRect(x, y, 2, 2);
                x += sx;
                if (p < 0) {
                    p += 2 * dy;
                } else {
                    y += sy;
                    p += 2 * (dy - dx);
                }
            }
        }
        // Case 2: steep slope (dy >= dx)
        else {
            int p = 2 * dx - dy;
            for (int i = 0; i <= dy; i++) {
                g.fillRect(x, y, 2, 2);
                y += sy;
                if (p < 0) {
                    p += 2 * dx;
                } else {
                    x += sx;
                    p += 2 * (dx - dy);
                }
            }
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Bresenham Line Drawing (No Swap)");
        BresenhamLineDrawing panel = new BresenhamLineDrawing();
        frame.add(panel);
        frame.setSize(400, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
