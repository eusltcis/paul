import java.util.*;

class Process {
    String id;
    int arrivalTime, burstTime, remainingTime, completionTime, turnAroundTime, waitingTime;

    public Process(String id, int arrivalTime, int burstTime) {
        this.id = id;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.remainingTime = burstTime; // Initialize remaining time with burst time
    }
}

public class OSAns20pp {

    // FCFS Scheduling
    public static void fcfs(List<Process> processList) {
        int currentTime = 0;

        for (Process p : processList) {
            if (currentTime < p.arrivalTime) {
                currentTime = p.arrivalTime;
            }
            p.completionTime = currentTime + p.burstTime;
            p.turnAroundTime = p.completionTime - p.arrivalTime;
            p.waitingTime = p.turnAroundTime - p.burstTime;
            currentTime = p.completionTime;
        }
        printResults("FCFS", processList);
    }

    // Preemptive Shortest Job Next (SJN)
    public static void preemptiveSJN(List<Process> processList) {
        int currentTime = 0, completed = 0;

        while (completed < processList.size()) {
            Process shortest = null;
            for (Process p : processList) {
                if (p.arrivalTime <= currentTime && p.remainingTime > 0) {
                    if (shortest == null || p.remainingTime < shortest.remainingTime) {
                        shortest = p;
                    }
                }
            }

            if (shortest != null) {
                shortest.remainingTime--;
                currentTime++;

                if (shortest.remainingTime == 0) {
                    shortest.completionTime = currentTime;
                    shortest.turnAroundTime = shortest.completionTime - shortest.arrivalTime;
                    shortest.waitingTime = shortest.turnAroundTime - shortest.burstTime;
                    completed++;
                }
            } else {
                currentTime++;
            }
        }
        printResults("Preemptive Shortest Job Next", processList);
    }

    // Round Robin Scheduling
    public static void roundRobin(List<Process> processes, int timeQuantum) {
        int currentTime = 0, completed = 0;
        Queue<Process> queue = new LinkedList<>();

        for (Process p : processes) {
            p.remainingTime = p.burstTime; // Reset remaining times
        }

        while (completed < processes.size()) {
            for (Process p : processes) {
                if (!queue.contains(p) && p.arrivalTime <= currentTime && p.remainingTime > 0) {
                    queue.add(p);
                }
            }

            if (!queue.isEmpty()) {
                Process current = queue.poll();
                int executeTime = Math.min(timeQuantum, current.remainingTime);
                current.remainingTime -= executeTime;
                currentTime += executeTime;

                if (current.remainingTime == 0) {
                    current.completionTime = currentTime;
                    current.turnAroundTime = current.completionTime - current.arrivalTime;
                    current.waitingTime = current.turnAroundTime - current.burstTime;
                    completed++;
                } else {
                    queue.add(current);
                }
            } else {
                currentTime++;
            }
        }
        printResults("Round Robin (Time Quantum = " + timeQuantum + ")", processes);
    }

    // Print results
    public static void printResults(String algorithm, List<Process> processes) {
        System.out.println("\n" + algorithm + " Results:");
        System.out.println("Process\tAT\tBT\tCT\tTAT\tWT");

        int totalTAT = 0, totalWT = 0;

        for (Process p : processes) {
            totalTAT += p.turnAroundTime;
            totalWT += p.waitingTime;
            System.out.println(p.id + "\t" + p.arrivalTime + "\t" + p.burstTime + "\t" +
                               p.completionTime + "\t" + p.turnAroundTime + "\t" + p.waitingTime);
        }

        System.out.println("Average Turnaround Time: " + (double) totalTAT / processes.size());
        System.out.println("Average Waiting Time: " + (double) totalWT / processes.size());
    }

    // Main method
    public static void main(String[] args) {
        List<Process> processes = Arrays.asList(
                new Process("P1", 0, 20),
                new Process("P2", 3, 7),
                new Process("P3", 5, 2),
                new Process("P4", 7, 3),
                new Process("P5", 7, 6)
        );

        fcfs(new ArrayList<>(processes));
        preemptiveSJN(new ArrayList<>(processes));
        roundRobin(new ArrayList<>(processes), 4);
    }
}

















//fcfc

class Process {
    int pid, arrivalTime, burstTime, completionTime, waitingTime, turnaroundTime;

    Process(int pid, int arrivalTime, int burstTime) {
        this.pid = pid;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
    };
}



public class Q1920 {

    public static void main(String[] args) {


        Process processes[] = {
                new Process(1, 0, 3),
                new Process(2, 1, 7),
				new Process(4, 4, 2),
                new Process(3, 3, 5),
                
          
                new Process(5, 7, 6)
        };

        // for FCFS sort with arrival time

        for (int i = 0; i < processes.length; i++) {

            for (int j = 0; j < processes.length - i - 1; j++) {

                if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
                    Process temp = processes[j];
                    processes[j] = processes[j + 1];
                    processes[j + 1] = temp;
                }
            }

        }

     

        int time = 0;
        double totalWaiting = 0, totalTurnaround = 0;

        // calcluations

        for (int i = 0; i < processes.length; i++) {

            processes[i].completionTime = time + processes[i].burstTime;
            processes[i].turnaroundTime = processes[i].completionTime - processes[i].arrivalTime;
            processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;

            time = processes[i].completionTime; 
            totalTurnaround += processes[i].turnaroundTime;
            totalWaiting += processes[i].waitingTime;

        }




        System.out.println("ProcessId\t ArrTime\t ComplTime\t BurstTime\t WaitTime\t TurnarTime");
        for (Process p :processes) {
            System.out.println(p.pid + "\t\t" + p.arrivalTime + "\t\t" + p.completionTime + "\t\t" + p.burstTime + "\t\t" + p.waitingTime + "\t\t" + p.turnaroundTime);
        }


        System.out.println("Average Waiting Time: " + totalWaiting / processes.length);

        System.out.println("Average Turnaround Time: " + totalTurnaround / processes.length);
    }

}







//sjf non pre 

import java.util.*;

class Process {
    int pid, arrivalTime, burstTime, completionTime, waitingTime, turnaroundTime;

    Process(int pid, int arrivalTime, int burstTime) {
        this.pid = pid;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
    }
}

public class NonPreemptiveSJF {

    public static void main(String[] args) {

        Process[] processes = {
            new Process(1, 0, 3),
            new Process(2, 1, 7),
            new Process(3, 3, 5),
            new Process(4, 4, 2),
            new Process(5, 7, 6)
        };

        // Sort by arrival time
        for (int i = 0; i < processes.length; i++) {
            for (int j = 0; j < processes.length - 1; j++) {
                if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
                    Process temp = processes[j];
                    processes[j] = processes[j + 1];
                    processes[j + 1] = temp;
                }
            }
        }

        int time = 0;
        double totalWaitingTime = 0, totalTurnaroundTime = 0;

        for (int i = 0; i < processes.length; i++) {
            // Find the process with the shortest burst time that has arrived
            int shortestIndex = -1;
            for (int j = 0; j < processes.length; j++) {
                if (processes[j].arrivalTime <= time && processes[j].completionTime == 0) {
                    if (shortestIndex == -1 || processes[j].burstTime < processes[shortestIndex].burstTime) {
                        shortestIndex = j;
                    }
                }
            }

            if (shortestIndex != -1) {
                Process current = processes[shortestIndex];
                current.completionTime = time + current.burstTime;
                current.turnaroundTime = current.completionTime - current.arrivalTime;
                current.waitingTime = current.turnaroundTime - current.burstTime;

                time = current.completionTime;
                totalTurnaroundTime += current.turnaroundTime;
                totalWaitingTime += current.waitingTime;
            } else {
                time++;
            }
        }

        System.out.println("Non-Preemptive SJF Scheduling");
        System.out.println("ProcessId\tArrivalTime\tBurstTime\tCompletionTime\tWaitingTime\tTurnaroundTime");

        for (Process p : processes) {
            System.out.println(p.pid + "\t\t" + p.arrivalTime + "\t\t" + p.burstTime + "\t\t" + p.completionTime + "\t\t" + p.waitingTime + "\t\t" + p.turnaroundTime);
        }

        System.out.println("Average Waiting Time: " + totalWaitingTime / processes.length);
        System.out.println("Average Turnaround Time: " + totalTurnaroundTime / processes.length);
    }
}





// fork 



#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
using namespace std;

// Function to check if a number is prime
bool isPrime(int n) {
    if (n <= 1) {
        return false;
    }
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

// Function to print an array
void printArray(int arr[], int size) {
    cout << "Array elements: ";
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int arr[10];
    int size = 10;

    cout << "Enter 10 integers: ";
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    pid_t pid;

    for (int i = 0; i < 6; ++i) {
        pid = fork();

        if (pid < 0) {
            cerr << "Fork Failed" << endl;
            return 1;
        } else if (pid == 0) {
            switch (i) {
                case 0: {
                    cout << "Parent ID: " << getppid() << endl;
                    printArray(arr, size);
                    break;
                }
                case 1: {
                    int sum = 0;
                    for (int j = 0; j < size; ++j) {
                        sum += arr[j];
                    }
                    cout << "1st child process: Sum of all numbers = " << sum << endl;
                    break;
                }
                case 2: {
                    int sum = 0;
                    for (int j = 0; j < size; ++j) {
                        if (arr[j] % 2 == 0) sum += arr[j];
                    }
                    cout << "2nd child process: Sum of even numbers = " << sum << endl;
                    break;
                }
                case 3: {
                    int sum = 0;
                    for (int j = 0; j < size; ++j) {
                        if (arr[j] % 2 != 0) sum += arr[j];
                    }
                    cout << "3rd child process: Sum of odd numbers = " << sum << endl;
                    break;
                }
                case 4: {
                    int sum = 0;
                    for (int j = 0; j < size; ++j) {
                        if (isPrime(arr[j])) sum += arr[j];
                    }
                    cout << "4th child process: Sum of prime numbers = " << sum << endl;
                    break;
                }
                case 5: {
                    int search;
                    cout << "Enter a number to search: ";
                    cin >> search;
                    bool found = false;
                    for (int j = 0; j < size; ++j) {
                        if (arr[j] == search) {
                            found = true;
                            break;
                        }
                    }
                    cout << "5th child process: Number " << (found ? "found" : "not found") << " in the array." << endl;
                    break;
                }
            }
            exit(0); // Exit the child process
        }
    }

    // Parent process waits for all child processes to finish
    for (int i = 0; i < 6; ++i) {
        wait(NULL);
    }

    return 0;
}







